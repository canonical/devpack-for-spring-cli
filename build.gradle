import io.spring.javaformat.gradle.tasks.CheckFormat

plugins {
	id 'org.springframework.boot' version '3.5.6'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'java'
    id 'antlr'
	id 'org.graalvm.buildtools.native' version '0.11.0' apply false
	id 'io.spring.javaformat' version '0.0.47' apply false
}

def useNative = project.hasProperty('cliNative') && cliNative.toBoolean()
def useChecks = project.hasProperty('cliChecks') ? cliChecks.toBoolean() : true

if (useNative) {
	apply plugin: 'org.graalvm.buildtools.native'
}

if (useChecks) {
	apply plugin: 'io.spring.javaformat'
	apply plugin: 'checkstyle'

	checkstyle {
		toolVersion = '11.1.0'
		configDirectory = file("src/checkstyle")
	}
}

description = 'Devpack for Spring Cli'
group = 'com.canonical'
sourceCompatibility = '17'

repositories {
	mavenCentral()
	mavenLocal()
	maven { url 'https://repo.gradle.org/gradle/libs-releases' }
}

ext {
	set('springShellVersion', '3.4.1')
	set('initializrVersion', '0.22.0')
	set('jarchivelibVersion', '1.2.0')
	set('openrewriteVersion', '8.62.4')
	set('antVersion', '1.10.15')
	set('mavenModelVersion', '3.9.11')
	set('jimfsVersion', '1.3.1')
	set('jsonpathVersion', '2.7.0')
	set('jaxbApiVersion', '2.3.1')
	set('jaxbRuntimeVersion', '4.0.6')
	set('jacksonVersion', '2.20.0')
}

configurations.all {
	resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation "org.springframework.shell:spring-shell-starter-jna"
	implementation 'io.spring.initializr:initializr-generator'
	implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml'
	implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml'
	implementation 'org.rauschig:jarchivelib'
	implementation 'org.openrewrite:rewrite-java-17'
	implementation 'org.openrewrite:rewrite-maven'
	implementation 'org.openrewrite:rewrite-xml'
	implementation 'org.apache.ant:ant'
	implementation 'org.apache.maven:maven-model'
	implementation 'javax.xml.bind:jaxb-api'
	implementation 'org.glassfish.jaxb:jaxb-runtime'

    implementation 'org.apache.commons:commons-text:1.14.0'
	implementation 'org.yaml:snakeyaml:2.5'
	implementation "org.openrewrite:rewrite-gradle:${openrewriteVersion}"
	implementation "org.openrewrite:rewrite-kotlin:${openrewriteVersion}"
	implementation "org.eclipse.jgit:org.eclipse.jgit:7.3.0.202506031305-r"
	implementation "org.codehaus.groovy:groovy-all:3.0.25"
	implementation "org.gradle:gradle-tooling-api:9.1.0"
    antlr 'org.antlr:antlr4:4.13.2'
    implementation 'org.antlr:antlr4-runtime:4.13.2'

    testImplementation 'com.google.jimfs:jimfs'
    testImplementation 'org.openrewrite:rewrite-test'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	if (useChecks) {
		checkstyle("io.spring.javaformat:spring-javaformat-checkstyle:0.0.47")
	}
}

dependencyManagement {
	dependencies {
		dependency "org.springframework.shell:spring-shell-starter-jna:${springShellVersion}"
		dependency "org.rauschig:jarchivelib:${jarchivelibVersion}"
		dependency "org.openrewrite:rewrite-test:${openrewriteVersion}"
		dependency "org.openrewrite:rewrite-java-17:${openrewriteVersion}"
		dependency "org.openrewrite:rewrite-xml:${openrewriteVersion}"
		dependency("org.openrewrite:rewrite-maven:${openrewriteVersion}") {
			exclude 'org.slf4j:jcl-over-slf4j'
		}
		dependency "org.apache.ant:ant:${antVersion}"
		dependency "org.apache.maven:maven-model:${mavenModelVersion}"
		dependency "com.google.jimfs:jimfs:${jimfsVersion}"
		dependency "javax.xml.bind:jaxb-api:${jaxbApiVersion}"
		dependency "org.glassfish.jaxb:jaxb-runtime:${jaxbRuntimeVersion}"
		dependency "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jacksonVersion}"
	}
	imports {
		mavenBom "org.springframework.shell:spring-shell-dependencies:${springShellVersion}"
		mavenBom "io.spring.initializr:initializr-bom:${initializrVersion}"
	}
}

test {
	useJUnitPlatform {
		if (!project.hasProperty('cliIncludeTags') && !project.hasProperty('cliExcludeTags')) {
			includeTags = ['none()']
		}
		else {
			if (project.hasProperty('cliIncludeTags') && cliIncludeTags.size() > 0) {
				includeTags = cliIncludeTags.split(',')
			}
			if (project.hasProperty('cliExcludeTags') && cliExcludeTags.size() > 0) {
				excludeTags = cliExcludeTags.split(',')
			}
		}

	}
	if (project.hasProperty('cliTestLogging') && (cliTestLogging.isEmpty() ? true : cliTestLogging.toBoolean())) {
		testLogging {
			showStandardStreams = true
			events = ["standardOut", "started", "passed", "failed", "skipped"]
		}
	}
}

task generateGitProperties {
	doLast {
		try {
			def branch = 'git rev-parse --abbrev-ref HEAD'.execute().text.trim()
			def revision = 'git rev-list --max-count 1 --timestamp HEAD'.execute().text.trim()
			def commitHash = revision.split(' ').last()
			def timestamp = revision ? new java.util.Date(java.util.concurrent.TimeUnit.SECONDS.toMillis(revision.split(' ').first() as long)).format("yyyy-MM-dd'T'HH:mm:ssZ") : null
			def commitHashShort = 'git rev-parse --short HEAD'.execute().text.trim()

			File resourcesDir = new File(project.getBuildDir(), 'resources/main')
			File propertiesFile = new File(resourcesDir, 'git.properties')

			if(timestamp) {
				if(!propertiesFile.exists()) {
					resourcesDir.mkdirs()
					propertiesFile.createNewFile()
				}
				propertiesFile.text = """git.branch=${branch}
git.commit.id=${commitHash}
git.commit.id.abbrev=${commitHashShort}
git.commit.time=${timestamp}
"""
			} else {
				project.logger.error('Unable to generate Git properties file.')
			}
		} catch (e) {
			project.logger.error('Unable to generate Git properties file.', e)
		}
	}
}

project.tasks.bootJar.dependsOn('generateGitProperties')

springBoot {
	buildInfo()
}

if (useNative) {
	graalvmNative {
		binaries {
			main {
				imageName = 'devpack-for-spring-cli'
                sharedLibrary = false
            }
		}
		metadataRepository {
			enabled = true
		}
	}
	// disable aot generated stuff when we have native plugin
	// which enables aot related things
	tasks.named('checkFormatAot') {
		enabled = false
	}

	tasks.named('checkFormatAotTest') {
		enabled = false
	}

    tasks.named('checkstyleAotTest') {
        enabled = false
    }

    tasks.named('checkstyleAot') {
        enabled = false
    }

}

tasks.named('checkFormatMain') {
    dependsOn(generateGrammarSource)
}

tasks.named("checkFormatTest") {
    dependsOn(generateTestGrammarSource)
}

tasks.withType(CheckFormat).configureEach {
    exclude "com/canonical/devpackspring/build/grammar"
}

tasks.withType(Checkstyle).configureEach {
    exclude "com/canonical/devpackspring/build/grammar"
}
